<Controls:MetroWindow x:Class="Substation_Builder.View.OnelineView"
                        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                        xmlns:mah="http://metro.mahapps.com/winfx/xaml/shared"
                        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                        xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
                        xmlns:Helpers="clr-namespace:Substation_Builder.Helpers"
                        xmlns:local1="clr-namespace:Substation_Builder.Pages.OnelineView"
                        xmlns:local2="clr-namespace:Substation_Builder.Model"
                        xmlns:local3="clr-namespace:Substation_Builder.Pages.DatabaseView"
                        mc:Ignorable="d"
                        Icon="..\Resources\Images\MainPageIcon.jpg"    
                        Title="One line" ResizeMode="CanResizeWithGrip"
                        WindowStartupLocation="CenterScreen"
                        x:Name="view"
                        BorderThickness="0" Height="720" Width="1000" MinWidth="1000" MinHeight="720" Background="{x:Null}">

    <Controls:MetroWindow.TitleTemplate>
        <DataTemplate>
            <TextBlock Text="{TemplateBinding Content}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" FontSize="22" Margin="20,0,0,0"/>
        </DataTemplate>
    </Controls:MetroWindow.TitleTemplate>

    <Controls:MetroWindow.Resources>

        <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
            <Setter Property="Background" Value="{x:Null}"/>
            <Setter Property="FontSize" Value="18"/>
        </Style>

        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Background" Value="#2d2d2d"/>
        </Style>

        <Style TargetType="{x:Type Expander}">
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="BorderBrush" Value="LightGray"/>
            <Setter Property="Margin" Value="10"/>
            <Setter Property="Background" Value="#2d2d2d"/>
            <Setter Property="Opacity" Value="0.85"/>
            <Setter Property="Padding" Value="5,0,0,0"/>
        </Style>

        <Style TargetType="Control" x:Key="EmptyFocusVisualStyle">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate/>
                </Setter.Value>
            </Setter>
        </Style>

        <Helpers:BindingProxy x:Key="DataContextProxy" Data="{Binding}"/>

        <!-- Remove Context Menu for Items in the control-->
        <!-- Incredibly evil as the contextmenu does not share the same datacontext as the treeview so the proxy is employed-->

        <!-- Context that need assigned -->
        <ContextMenu x:Key="RelayItemContext" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
            <MenuItem Header="Delete Relay" Command="{Binding Data.RemoveItemCommand, Source={StaticResource DataContextProxy}}" CommandParameter="{Binding}"/>
        </ContextMenu>
        <ContextMenu x:Key="CTItemContext" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
            <MenuItem Header="Delete CT" Command="{Binding Data.RemoveItemCommand, Source={StaticResource DataContextProxy}}" CommandParameter="{Binding}"/>
        </ContextMenu>
        <ContextMenu x:Key="TheveninItemContext" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
            <MenuItem Header="Delete Thevenin" Command="{Binding Data.RemoveItemCommand, Source={StaticResource DataContextProxy}}" CommandParameter="{Binding}"/>
        </ContextMenu>
        <ContextMenu x:Key="BreakerContext" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
            <MenuItem Header="Delete Breaker" Command="{Binding Data.RemoveItemCommand, Source={StaticResource DataContextProxy}}" CommandParameter="{Binding}"/>
            <MenuItem Header="Add CT" Command="{Binding Data.AddCTCommand, Source={StaticResource DataContextProxy}}" CommandParameter="{Binding}"/>
        </ContextMenu>
        <ContextMenu x:Key="XFMRContext" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
            <MenuItem Header="Delete XFMR" Command="{Binding Data.RemoveItemCommand, Source={StaticResource DataContextProxy}}" CommandParameter="{Binding}"/>
            <MenuItem Header="Add CT" Command="{Binding Data.AddCTCommand, Source={StaticResource DataContextProxy}}" CommandParameter="{Binding}"/>
        </ContextMenu>

        <!-- File menu -->

        <ContextMenu x:Key="ProjectContext" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
            <MenuItem Header="New Project" Command="{Binding Data.NewCommand, Source={StaticResource DataContextProxy}}" CommandParameter="Project"/>
            <MenuItem Header="Open Project" Command="{Binding Data.LoadCommand, Source={StaticResource DataContextProxy}}" CommandParameter="Project"/>
            <MenuItem Header="Save Project" Command="{Binding Data.SaveCommand, Source={StaticResource DataContextProxy}}" CommandParameter="Project"/>
            <MenuItem Header="Load Template" Command="{Binding Data.TemplateCommand, Source={StaticResource DataContextProxy}}" CommandParameter="Project"/>
        </ContextMenu>

        <!-- Add Items -->

        <ContextMenu x:Key="AddTheveninContext" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
            <MenuItem Header="Add Thevenin" Command="{Binding Data.AddItemCommand, Source={StaticResource DataContextProxy}}" CommandParameter="Thevenin"/>
        </ContextMenu>
        <ContextMenu x:Key="AddTransformerContext" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
            <MenuItem Header="Add Transformer" Command="{Binding Data.AddItemCommand, Source={StaticResource DataContextProxy}}" CommandParameter="Transformer"/>
        </ContextMenu>
        <ContextMenu x:Key="AddRelayContext" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
            <MenuItem Header="Add Relay" Command="{Binding Data.AddItemCommand, Source={StaticResource DataContextProxy}}" CommandParameter="Relay"/>
        </ContextMenu>
        <ContextMenu x:Key="AddBreakerContext" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
            <MenuItem Header="Add Breaker" Command="{Binding Data.AddItemCommand, Source={StaticResource DataContextProxy}}" CommandParameter="Breaker"/>
        </ContextMenu>


    </Controls:MetroWindow.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="370"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <ScrollViewer VerticalScrollBarVisibility="Visible">
            <StackPanel Margin="10" Background="Black">
                <Expander Header="Substation" IsExpanded="True">

                    <TreeView x:Name="OnelineTreeview" PreviewMouseRightButtonDown="Oneline_PreviewMouseRightButtonDown"
                              VerticalContentAlignment="Top" HorizontalContentAlignment="Left" x:FieldModifier="public" Background="{x:Null}"
                              BorderBrush="{x:Null}" MouseMove="OnelineTreeview_MouseMove" AllowDrop="True" SelectedItemChanged="OnelineTreeview_SelectedItemChanged">

                        <!-- This is the Header and Treeview Items for Thevenin-->
                        <TreeViewItem Header="{Binding Project.SubData.Name,FallbackValue='[No Project Set]'}" ContextMenu="{DynamicResource ProjectContext}">

                            <!-- This is the Header and Treeview Items for Thevenin-->
                            <TreeViewItem x:Name="Subdata" Header='Substation Data' ItemsSource="{Binding Project.SubData}"/>

                            <!-- This is the Header and Treeview Items for Thevenin-->
                            <TreeViewItem Header='Thevenins' ItemsSource="{Binding Project.Thevenins}" ContextMenu="{DynamicResource AddTheveninContext}">
                                <!-- This is the treeview Items for Thevenin-->
                                <TreeViewItem.ItemTemplate>
                                    <HierarchicalDataTemplate>
                                        <TextBlock Text="{Binding Name}"/>
                                    </HierarchicalDataTemplate>
                                </TreeViewItem.ItemTemplate>
                            </TreeViewItem>

                            <!-- This is the Header and Transformers-->
                            <TreeViewItem Header="Transformers" ItemsSource="{Binding Project.Transformers}" ContextMenu="{DynamicResource AddTransformerContext}">
                                <TreeViewItem.ItemTemplate>
                                    <HierarchicalDataTemplate ItemsSource="{Binding CTs}">
                                        <TextBlock Text="{Binding Name}"/>
                                    </HierarchicalDataTemplate>
                                </TreeViewItem.ItemTemplate>
                            </TreeViewItem>

                            <!-- This is the Header and Breakers-->
                            <TreeViewItem Header="Breakers" ItemsSource="{Binding Project.Breakers}" ContextMenu="{DynamicResource AddBreakerContext}">
                                <!-- This is the treeview Items for Breaker-->
                                <TreeViewItem.ItemTemplate>
                                    <HierarchicalDataTemplate ItemsSource="{Binding CTs}">
                                        <TextBlock Text="{Binding Name}"/>
                                    </HierarchicalDataTemplate>
                                </TreeViewItem.ItemTemplate>
                            </TreeViewItem>

                            <!-- This is the Header and Treeview Items for Relay-->
                            <TreeViewItem Header='Relays' ItemsSource="{Binding Project.Relays}" ContextMenu="{DynamicResource AddRelayContext}">
                                <!-- This is the reeview Items for Relay-->
                                <TreeViewItem.ItemTemplate>
                                    <HierarchicalDataTemplate>
                                        <TextBlock Text="{Binding Name}"/>
                                    </HierarchicalDataTemplate>
                                </TreeViewItem.ItemTemplate>
                            </TreeViewItem>
                        </TreeViewItem>
                    </TreeView>

                </Expander>

                <!-- Displays the Forms from the selected Treeview Item -->
                <Expander x:Name="TreeviewExpander" Header="{Binding SelectedObject.Name,UpdateSourceTrigger=PropertyChanged,FallbackValue='[Select an Element]'}" IsExpanded="True">
                    <Expander.Resources>
                        <DataTemplate DataType="{x:Type local2:SubstationData}">
                            <Viewbox StretchDirection="DownOnly">
                                <local3:SubstationPage/>
                            </Viewbox>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type local2:Thevenin}">
                            <Viewbox StretchDirection="DownOnly">
                                <local3:TheveninPage/>
                            </Viewbox>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type local2:Transformer}">
                            <Viewbox StretchDirection="DownOnly">
                                <local3:TransformerPage/>
                            </Viewbox>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type local2:Relay}">
                            <Viewbox StretchDirection="DownOnly">
                                <local3:RelayPage/>
                            </Viewbox>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type local2:Breaker}">
                            <Viewbox StretchDirection="DownOnly">
                                <local3:BreakerPage/>
                            </Viewbox>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type local2:CT}">
                            <Viewbox StretchDirection="DownOnly">
                                <local3:CTPage/>
                            </Viewbox>
                        </DataTemplate>
                    </Expander.Resources>
                </Expander>

                <Expander Content="{Binding SelectedObject}" Header="{Binding SelectedObject.Name,UpdateSourceTrigger=PropertyChanged,FallbackValue='[Select an Element]'}">
                    <Expander.Resources>
                        <DataTemplate DataType="{x:Type local2:Node}">
                            <local1:NodePropertyEditor/>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type local2:Connector}">
                            <local1:ConnectorPropertyEditor/>
                        </DataTemplate>
                    </Expander.Resources>
                </Expander>

                <Expander Header="Options">
                    <local1:ParametersEditor/>
                </Expander>

            </StackPanel>
        </ScrollViewer>

        <!-- The Display UI -->
        <Border Grid.Column="1" BorderThickness="2" CornerRadius="10" Margin="10" Padding="0" BorderBrush="#FF9C9595" DragOver="Border_DragOver" AllowDrop="True">
            <Border.Background>
                <SolidColorBrush Color="Black" Opacity="0.4"/>
            </Border.Background>

            <Grid Margin="10" Grid.Row="0">
                <Grid.Resources>
                    <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter"/>

                    <!-- This CompositeCollection basically Concatenates the Nodes and Connectors in a single one -->
                    <CompositeCollection x:Key="Col">
                        <CollectionContainer Collection="{Binding DataContext.Connectors,Source={x:Reference view}}"/>
                        <CollectionContainer Collection="{Binding DataContext.Nodes,Source={x:Reference view}}"/>
                    </CompositeCollection>

                    <!-- This is the DataTemplate that will be used to render the Breaker class -->
                    <DataTemplate DataType="{x:Type local2:Node}">
                        <Thumb DragDelta="Thumb_Drag" IsEnabled="{Binding IsSelected,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center" VerticalContentAlignment="Center">
                            <Thumb.Template>
                                <ControlTemplate TargetType="Thumb">

                                    <!-- The breaker -->
                                    <DockPanel Margin="-20,-20,20,20">
                                        <!-- visual of the breaker -->
                                        <Grid>
                                            <Rectangle Height="40" Width="40" Stroke="Black" StrokeThickness="1" Fill="Red" x:Name="Breaker" Stretch="Uniform" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" OpacityMask="Black"/>
                                            <TextBlock TextAlignment="Center" Text="{Binding Name}" FontWeight="Bold" IsHitTestVisible="False" Visibility="{Binding DataContext.ShowNames, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Converter={StaticResource BoolToVisibilityConverter}}" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="Black"/>
                                        </Grid>
                                        <!-- Coordinates for the item -->
                                        <StackPanel HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5,0,0,0">
                                            <TextBlock Text="{Binding X, StringFormat='{}X = {0}'}" IsHitTestVisible="False" Visibility="Collapsed" x:Name="XText" HorizontalAlignment="Left"/>
                                            <TextBlock Text="{Binding Y, StringFormat='{}Y = {0}'}" IsHitTestVisible="False" Visibility="Collapsed" x:Name="YText" HorizontalAlignment="Left"/>
                                        </StackPanel>
                                    </DockPanel>

                                    <!--#region -->
                                    <!-- UI interactions -->

                                    <!-- Flashes selected item -->
                                    <ControlTemplate.Triggers>
                                        <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="True">
                                            <DataTrigger.EnterActions>
                                                <BeginStoryboard x:Name="Flash">
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.TargetName="Breaker" Storyboard.TargetProperty="Opacity" From="1" To=".5" Duration="0:0:0.5" AutoReverse="True" RepeatBehavior="Forever" />
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </DataTrigger.EnterActions>
                                            <DataTrigger.ExitActions>
                                                <StopStoryboard BeginStoryboardName="Flash"/>
                                            </DataTrigger.ExitActions>
                                        </DataTrigger>

                                        <!-- Change border thickness when dragging -->
                                        <Trigger Property="IsDragging" Value="True">
                                            <Setter TargetName="Breaker" Property="StrokeThickness" Value="2"/>
                                        </Trigger>

                                        <!-- Hide/Show the grid displays -->
                                        <DataTrigger Binding="{Binding DataContext.ShowAllCoordinates, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" Value="True">
                                            <Setter TargetName="XText" Property="Visibility" Value="Visible"/>
                                            <Setter TargetName="YText" Property="Visibility" Value="Visible"/>
                                        </DataTrigger>

                                        <!--When selected for a connector -->
                                        <DataTrigger Binding="{Binding IsHighlighted}" Value="True">
                                            <Setter TargetName="Breaker" Property="StrokeThickness" Value="2"/>
                                            <Setter TargetName="Breaker" Property="Stroke" Value="Red"/>
                                            <Setter TargetName="Breaker" Property="Fill" Value="White"/>
                                        </DataTrigger>

                                        <!-- Other end when connector is being placed -->
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="True"/>
                                                <Condition Binding="{Binding DataContext.ShowCurrentCoordinates, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="XText" Property="Visibility" Value="Visible"/>
                                            <Setter TargetName="YText" Property="Visibility" Value="Visible"/>
                                        </MultiDataTrigger>

                                    </ControlTemplate.Triggers>
                                    <!--#endregion-->

                                </ControlTemplate>
                            </Thumb.Template>
                        </Thumb>
                    </DataTemplate>

                    <!-- This is the DataTemplate that will be used to render the Connector class -->
                    <DataTemplate DataType="{x:Type local2:Connector}">
                        <Line Stroke="Blue" StrokeThickness="3"
                            X1="{Binding Start.X}" Y1="{Binding Start.Y}"
                            X2="{Binding End.X}" Y2="{Binding End.Y}" x:Name="Line"/>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding End}" Value="{x:Null}">
                                <Setter TargetName="Line" Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="True">
                                <Setter TargetName="Line" Property="Stroke" Value="Red"/>
                                <Setter TargetName="Line" Property="StrokeDashArray" Value="2 3"/>
                                <DataTrigger.EnterActions>
                                    <BeginStoryboard x:Name="DashAnimation">
                                        <Storyboard Duration="00:00:01" RepeatBehavior="Forever">
                                            <DoubleAnimation From="0" To="25" Storyboard.TargetName="Line" Storyboard.TargetProperty="StrokeDashOffset"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </DataTrigger.EnterActions>
                                <DataTrigger.ExitActions>
                                    <StopStoryboard BeginStoryboardName="DashAnimation"/>
                                </DataTrigger.ExitActions>
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </Grid.Resources>

                <ListBox SelectedItem="{Binding SelectedObject}" 
                     PreviewMouseMove="ListBox_PreviewMouseMove"
                     PreviewMouseDown="ListBox_PreviewMouseDown" HorizontalAlignment="Center" VerticalAlignment="Center" x:Name="ListBoxUI" DragOver="ListBoxUI_DragOver" Drop="ListBoxUI_Drop">

                    <ListBox.LayoutTransform>
                        <ScaleTransform CenterX="0" CenterY="0" ScaleX="{Binding ZoomLevel}" ScaleY="{Binding ZoomLevel}"/>
                    </ListBox.LayoutTransform>

                    <ListBox.Background>
                        <SolidColorBrush Color="#FF252525" Opacity="0.9"/>
                    </ListBox.Background>
                    <ListBox.Template>
                        <ControlTemplate>
                            <Border>
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,1" Opacity=".3">
                                        <GradientStop Color="White" Offset="0"/>
                                        <GradientStop Color="GhostWhite" Offset="1"/>
                                    </LinearGradientBrush>
                                </Border.Background>

                                <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">
                                    <Border>
                                        <!-- This Border serves as a background and the VisualBrush used to paint its background serves as the "Snapping Grid" -->
                                        <!-- The "Snapping" Actually occurs in the Node class (see Node.X and Node.Y properties), it has nothing to do with any UI Elements -->
                                        <Border.Background>
                                            <VisualBrush TileMode="Tile"
                                        Viewport="0,0,25,25" ViewportUnits="Absolute" 
                                        Viewbox="0,0,50,50" ViewboxUnits="Absolute">
                                                <VisualBrush.Visual>
                                                    <Rectangle Stroke="Darkgray" StrokeThickness="1" Height="50" Width="50"
                                            StrokeDashArray="5 3"/>
                                                </VisualBrush.Visual>
                                            </VisualBrush>
                                        </Border.Background>
                                        <ItemsPresenter/>
                                    </Border>
                                </ScrollViewer>
                            </Border>
                        </ControlTemplate>
                    </ListBox.Template>
                    <ListBox.ItemsSource>
                        <StaticResource ResourceKey="Col"/>
                    </ListBox.ItemsSource>
                    <ListBox.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Canvas IsItemsHost="True" Background="#01FFFFFF" 
                                Height="{Binding AreaHeight}" Width="{Binding AreaWidth}"
                                VerticalAlignment="Top" HorizontalAlignment="Left"/>
                        </ItemsPanelTemplate>
                    </ListBox.ItemsPanel>
                    <ListBox.ItemContainerStyle>
                        <Style TargetType="ListBoxItem">
                            <Setter Property="Canvas.Left" Value="{Binding X}"/>
                            <Setter Property="Canvas.Top" Value="{Binding Y}"/>
                            <Setter Property="FocusVisualStyle" Value="{StaticResource EmptyFocusVisualStyle}"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ListBoxItem">
                                        <ContentPresenter x:Name="Content"/>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsSelected" Value="True">
                                                <Setter TargetName="Content" Property="Effect">
                                                    <Setter.Value>
                                                        <DropShadowEffect Color="Gray" ShadowDepth="4" BlurRadius="10"/>
                                                    </Setter.Value>
                                                </Setter>
                                            </Trigger>
                                            <DataTrigger Binding="{Binding IsNew}" Value="True">
                                                <Setter Property="Opacity" Value=".5"/>
                                            </DataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ListBox.ItemContainerStyle>
                </ListBox>
            </Grid>
        </Border>
    </Grid>

</Controls:MetroWindow>
